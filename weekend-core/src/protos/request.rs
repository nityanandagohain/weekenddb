// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `request.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct KeyTuple {
    // message fields
    pub key: ::std::string::String,
    pub lattice_type: LatticeType,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyTuple {
    fn default() -> &'a KeyTuple {
        <KeyTuple as ::protobuf::Message>::default_instance()
    }
}

impl KeyTuple {
    pub fn new() -> KeyTuple {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .LatticeType lattice_type = 2;


    pub fn get_lattice_type(&self) -> LatticeType {
        self.lattice_type
    }
    pub fn clear_lattice_type(&mut self) {
        self.lattice_type = LatticeType::NONE;
    }

    // Param is passed by value, moved
    pub fn set_lattice_type(&mut self, v: LatticeType) {
        self.lattice_type = v;
    }

    // bytes payload = 4;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for KeyTuple {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.lattice_type, 2, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.lattice_type != LatticeType::NONE {
            my_size += ::protobuf::rt::enum_size(2, self.lattice_type);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.lattice_type != LatticeType::NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.lattice_type))?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(4, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyTuple {
        KeyTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &KeyTuple| { &m.key },
                |m: &mut KeyTuple| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LatticeType>>(
                "lattice_type",
                |m: &KeyTuple| { &m.lattice_type },
                |m: &mut KeyTuple| { &mut m.lattice_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &KeyTuple| { &m.payload },
                |m: &mut KeyTuple| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeyTuple>(
                "KeyTuple",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeyTuple {
        static instance: ::protobuf::rt::LazyV2<KeyTuple> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyTuple::new)
    }
}

impl ::protobuf::Clear for KeyTuple {
    fn clear(&mut self) {
        self.key.clear();
        self.lattice_type = LatticeType::NONE;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeyRequest {
    // message fields
    pub field_type: RequestType,
    pub tuples: ::protobuf::RepeatedField<KeyTuple>,
    pub request_id: ::std::string::String,
    pub response_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyRequest {
    fn default() -> &'a KeyRequest {
        <KeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl KeyRequest {
    pub fn new() -> KeyRequest {
        ::std::default::Default::default()
    }

    // .RequestType type = 1;


    pub fn get_field_type(&self) -> RequestType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = RequestType::RT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RequestType) {
        self.field_type = v;
    }

    // repeated .KeyTuple tuples = 2;


    pub fn get_tuples(&self) -> &[KeyTuple] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<KeyTuple>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<KeyTuple> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<KeyTuple> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }

    // string request_id = 3;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // string response_address = 4;


    pub fn get_response_address(&self) -> &str {
        &self.response_address
    }
    pub fn clear_response_address(&mut self) {
        self.response_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_address(&mut self, v: ::std::string::String) {
        self.response_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_address(&mut self) -> &mut ::std::string::String {
        &mut self.response_address
    }

    // Take field
    pub fn take_response_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for KeyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != RequestType::RT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.request_id);
        }
        if !self.response_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.response_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != RequestType::RT_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.tuples {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.request_id.is_empty() {
            os.write_string(3, &self.request_id)?;
        }
        if !self.response_address.is_empty() {
            os.write_string(4, &self.response_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyRequest {
        KeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RequestType>>(
                "type",
                |m: &KeyRequest| { &m.field_type },
                |m: &mut KeyRequest| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KeyTuple>>(
                "tuples",
                |m: &KeyRequest| { &m.tuples },
                |m: &mut KeyRequest| { &mut m.tuples },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &KeyRequest| { &m.request_id },
                |m: &mut KeyRequest| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_address",
                |m: &KeyRequest| { &m.response_address },
                |m: &mut KeyRequest| { &mut m.response_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeyRequest>(
                "KeyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeyRequest {
        static instance: ::protobuf::rt::LazyV2<KeyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyRequest::new)
    }
}

impl ::protobuf::Clear for KeyRequest {
    fn clear(&mut self) {
        self.field_type = RequestType::RT_UNSPECIFIED;
        self.tuples.clear();
        self.request_id.clear();
        self.response_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RequestType {
    RT_UNSPECIFIED = 0,
    GET = 1,
    PUT = 2,
}

impl ::protobuf::ProtobufEnum for RequestType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestType> {
        match value {
            0 => ::std::option::Option::Some(RequestType::RT_UNSPECIFIED),
            1 => ::std::option::Option::Some(RequestType::GET),
            2 => ::std::option::Option::Some(RequestType::PUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RequestType] = &[
            RequestType::RT_UNSPECIFIED,
            RequestType::GET,
            RequestType::PUT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RequestType>("RequestType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RequestType {
}

impl ::std::default::Default for RequestType {
    fn default() -> Self {
        RequestType::RT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LatticeType {
    NONE = 0,
    LWW = 1,
}

impl ::protobuf::ProtobufEnum for LatticeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LatticeType> {
        match value {
            0 => ::std::option::Option::Some(LatticeType::NONE),
            1 => ::std::option::Option::Some(LatticeType::LWW),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LatticeType] = &[
            LatticeType::NONE,
            LatticeType::LWW,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LatticeType>("LatticeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LatticeType {
}

impl ::std::default::Default for LatticeType {
    fn default() -> Self {
        LatticeType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for LatticeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rrequest.proto\"g\n\x08KeyTuple\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12/\n\x0clattice_type\x18\x02\x20\x01(\x0e2\x0c.LatticeTypeR\
    \x0blatticeType\x12\x18\n\x07payload\x18\x04\x20\x01(\x0cR\x07payload\"\
    \x9b\x01\n\nKeyRequest\x12\x20\n\x04type\x18\x01\x20\x01(\x0e2\x0c.Reque\
    stTypeR\x04type\x12!\n\x06tuples\x18\x02\x20\x03(\x0b2\t.KeyTupleR\x06tu\
    ples\x12\x1d\n\nrequest_id\x18\x03\x20\x01(\tR\trequestId\x12)\n\x10resp\
    onse_address\x18\x04\x20\x01(\tR\x0fresponseAddress*3\n\x0bRequestType\
    \x12\x12\n\x0eRT_UNSPECIFIED\x10\0\x12\x07\n\x03GET\x10\x01\x12\x07\n\
    \x03PUT\x10\x02*\x20\n\x0bLatticeType\x12\x08\n\x04NONE\x10\0\x12\x07\n\
    \x03LWW\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
